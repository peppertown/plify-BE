// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int             @id @default(autoincrement())
  spotifyId     String?         @unique
  email         String?         @unique
  name          String?
  nickname      String?         @unique
  auth_provider String
  profile_url   String?
  password      String?
  createdAt     DateTime        @default(now())
  lastLoginedAt DateTime?       @default(now())
  Playlist      Playlist[]
  Comment       Comment[]
  CommentLike   CommentLike[]
  PlaylistLike  PlaylistLike[]
  UserTopArtist UserTopArtist[]
  UserTopTrack  UserTopTrack[]
  UserTopGenre  UserTopGenre[]

  following UserFollow[] @relation("Following")
  followers UserFollow[] @relation("Followers")
}

model Playlist {
  id            Int      @id @default(autoincrement())
  userId        Int
  playlistId    String   @unique // Spotify URL에서 추출한 실제 플레이리스트 ID
  name          String?
  userName      String?
  imageUrl      String?
  externalUrl   String?
  viewCount     Int      @default(0)
  createdAt     DateTime @default(now())
  lastFetchedAt DateTime @default(now())
  explanation   String?

  user           User             @relation(fields: [userId], references: [id], onDelete: Cascade)
  Comment        Comment[]
  PlaylistLike   PlaylistLike[]
  PlaylistGenres PlaylistGenres[]
  PlaylistItems  PlaylistItems[]
}

model PlaylistItems {
  id                Int     @id @default(autoincrement())
  playlistId        Int
  trackId           String
  title             String
  artistName        String
  artistExternalUrl String?
  imageUrl          String
  externalUrl       String?
  durationMs        Int

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)

  @@index([playlistId])
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  content   String
  createdAt DateTime @default(now())

  post  Playlist      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user  User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  likes CommentLike[]
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId], name: "userId_commentId")
}

model PlaylistLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())

  user User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Playlist @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId], name: "userId_postId")
}

model UserTopArtist {
  id          Int       @id @default(autoincrement())
  userId      Int
  rank        Int
  artistId    String
  name        String
  imageUrl    String?
  externalUrl String
  snapshotAt  DateTime  @default(now())
  timeRange   TimeRange
  diff        Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, artistId, timeRange])
  @@index([timeRange, snapshotAt])
}

model UserTopTrack {
  id          Int       @id @default(autoincrement())
  userId      Int
  rank        Int
  trackId     String
  name        String
  imageUrl    String?
  artistId    String
  artistName  String
  externalUrl String
  snapshotAt  DateTime  @default(now())
  timeRange   TimeRange
  diff        Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, trackId, snapshotAt, timeRange])
  @@index([timeRange, snapshotAt])
}

model UserTopGenre {
  id         Int       @id @default(autoincrement())
  userId     Int
  rank       Int
  genre      String
  artistData String    @db.LongText
  timeRange  TimeRange
  snapshotAt DateTime  @default(now())
  diff       Int?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([timeRange, snapshotAt])
}

model Genre {
  id             Int              @id @default(autoincrement())
  name           String
  PlaylistGenres PlaylistGenres[]
}

model PlaylistGenres {
  id         Int @id @default(autoincrement())
  playlistId Int
  genreId    Int

  playlist Playlist @relation(fields: [playlistId], references: [id], onDelete: Cascade)
  genre    Genre    @relation(fields: [genreId], references: [id])

  @@unique([playlistId, genreId])
}

model UserFollow {
  id         Int      @id @default(autoincrement())
  followerId Int
  followeeId Int
  createdAt  DateTime @default(now())

  follower User @relation("Followers", fields: [followerId], references: [id], onDelete: Cascade)
  followee User @relation("Following", fields: [followeeId], references: [id], onDelete: Cascade)

  @@unique([followerId, followeeId], name: "unique_following")
}

enum TimeRange {
  short_term
  medium_term
  long_term
}
