// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int             @id @default(autoincrement())
  spotifyId      String?         @unique
  email          String          @unique
  name           String
  nickname       String          @unique
  auth_provider  String
  profile_url    String?
  password       String?
  followersCount Int             @default(0)
  createdAt      DateTime        @default(now())
  Playlist       Playlist[]
  Comment        Comment[]
  CommentLike    CommentLike[]
  PlaylistLike   PlaylistLike[]
  UserTopArtist  UserTopArtist[]
  UserTopTrack   UserTopTrack[]
}

model Playlist {
  id         Int      @id @default(autoincrement())
  userId     Int
  playlistId String   @unique // Spotify URL에서 추출한 실제 플레이리스트 ID
  viewCount  Int      @default(0)
  createdAt  DateTime @default(now())

  user         User           @relation(fields: [userId], references: [id])
  Comment      Comment[]
  PlaylistLike PlaylistLike[]
}

model Comment {
  id        Int      @id @default(autoincrement())
  postId    Int
  userId    Int
  content   String
  createdAt DateTime @default(now())

  post  Playlist      @relation(fields: [postId], references: [id], onDelete: Cascade)
  user  User          @relation(fields: [userId], references: [id])
  likes CommentLike[]
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  commentId Int
  createdAt DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  @@unique([userId, commentId], name: "userId_commentId")
}

model PlaylistLike {
  id        Int      @id @default(autoincrement())
  userId    Int
  postId    Int
  createdAt DateTime @default(now())

  user User     @relation(fields: [userId], references: [id])
  post Playlist @relation(fields: [postId], references: [id], onDelete: Cascade)

  @@unique([userId, postId], name: "userId_postId")
}

model UserTopArtist {
  id          Int      @id @default(autoincrement())
  userId      Int
  rank        Int
  artistId    String
  name        String
  imageUrl    String?
  externalUrl String
  snapshotAt  DateTime @default(now()) // 언제 스냅샷했는지

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, artistId, snapshotAt])
}

model UserTopTrack {
  id          Int       @id @default(autoincrement())
  userId      Int
  rank        Int
  trackId     String
  name        String
  imageUrl    String?
  artistId    String
  artistName  String
  externalUrl String
  snapshotAt  DateTime  @default(now())
  timeRange   TimeRange

  user User @relation(fields: [userId], references: [id])

  @@unique([userId, trackId, snapshotAt, timeRange])
}

enum TimeRange {
  short_term
  medium_term
  long_term
}
